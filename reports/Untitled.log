Traceback (most recent call last):
  File "C:\Users\janko\AppData\Local\Programs\Python\Python310\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "C:\Users\janko\AppData\Local\Programs\Python\Python310\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\janko\AppData\Local\Programs\Python\Python310\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\janko\AppData\Local\Programs\Python\Python310\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\janko\AppData\Local\Programs\Python\Python310\lib\asyncio\base_events.py", line 646, in run_until_complete
    return future.result()
  File "C:\Users\janko\AppData\Local\Programs\Python\Python310\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Users\janko\AppData\Local\Programs\Python\Python310\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\janko\AppData\Local\Programs\Python\Python310\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt

# Exponential distribution example
population_rate = 0.5
population_size = 100000

plt.hist(population, bins=30, density=True, alpha=0.5, label='Population')
plt.xlabel('Time Between Arrivals')
plt.ylabel('Frequency')
plt.title('Distribution of Population (Exponential Distribution)')
plt.axvline(x=1/population_rate, color='r', label='Population Mean')
plt.legend()
plt.show()

population = np.random.exponential(scale=1/population_rate, size=population_size)

sample_size = 100
num_samples = 1000

sample_means = []
for i in range(num_samples):
    sample = np.random.choice(population, sample_size)
    sample_mean = np.mean(sample)
    sample_means.append(sample_mean)

plt.hist(sample_means, bins=30, density=True, alpha=0.5, label='Sample Means')
plt.xlabel('Time Between Arrivals')
plt.ylabel('Frequency')
plt.title('Distribution of Sample Means (Exponential Distribution)')
plt.axvline(x=1/population_rate, color='r', label='Population Mean')
plt.legend()
plt.show()

------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mNameError[0m                                 Traceback (most recent call last)
Input [1;32mIn [1][0m, in [0;36m<cell line: 8>[1;34m()[0m
[0;32m      5[0m population_rate [38;5;241m=[39m [38;5;241m0.5[39m
[0;32m      6[0m population_size [38;5;241m=[39m [38;5;241m100000[39m
[1;32m----> 8[0m plt[38;5;241m.[39mhist([43mpopulation[49m, bins[38;5;241m=[39m[38;5;241m30[39m, density[38;5;241m=[39m[38;5;28;01mTrue[39;00m, alpha[38;5;241m=[39m[38;5;241m0.5[39m, label[38;5;241m=[39m[38;5;124m'[39m[38;5;124mPopulation[39m[38;5;124m'[39m)
[0;32m      9[0m plt[38;5;241m.[39mxlabel([38;5;124m'[39m[38;5;124mTime Between Arrivals[39m[38;5;124m'[39m)
[0;32m     10[0m plt[38;5;241m.[39mylabel([38;5;124m'[39m[38;5;124mFrequency[39m[38;5;124m'[39m)

[1;31mNameError[0m: name 'population' is not defined
NameError: name 'population' is not defined

